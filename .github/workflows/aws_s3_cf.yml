
name: Static website using AWS S3 via CloudFront

on:
  push:
    branches:
      - main

jobs:
  s3-with-oac:
    runs-on: ubuntu-latest 
    outputs:
      bucket_name: ${{ steps.s3.outputs.bucket_name }}
      oac_id: ${{ steps.oac.outputs.oac_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create new bucket or reuse existing
        id: s3
        run: |
          BUCKET="${{ secrets.S3_BUCKET_NAME }}"
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket $BUCKET already exists. Reusing."
          else
            aws s3api create-bucket \
              --bucket "$BUCKET" 
            echo "Created new bucket: $BUCKET"
          fi

          echo "bucket_name=$BUCKET" >> $GITHUB_OUTPUT

      - name: Upload website files to S3
        run: |
          BUCKET="${{ steps.s3.outputs.bucket_name }}"
          aws s3 cp index.html s3://"$BUCKET"/index.html

      - name: Create or reuse Origin Access Control (OAC)
        id: oac
        run: |
          EXISTING_OAC=$(aws cloudfront list-origin-access-controls \
            --query "OriginAccessControlList.Items[?Name=='MyOAC'].Id" \
            --output text)

          if [ -n "$EXISTING_OAC" ]; then
            echo "Reusing existing OAC: $EXISTING_OAC"
            OAC_ID=$EXISTING_OAC
          else
            OAC_ID=$(aws cloudfront create-origin-access-control \
              --origin-access-control-config '{"Name":"MyOAC","Description":"OAC for private S3 bucket","SigningProtocol":"sigv4","SigningBehavior":"always","OriginAccessControlOriginType":"s3"}' \
              --query "OriginAccessControl.Id" --output text)
            echo "Created new OAC: $OAC_ID"
          fi

          echo "oac_id=$OAC_ID" >> $GITHUB_OUTPUT

      - name: Attach minimal bucket policy for CloudFront
        run: |
          BUCKET="${{ steps.s3.outputs.bucket_name }}"
          OAC_ID="${{ steps.oac.outputs.oac_id }}"
          cat <<EOF > bucket-policy.json
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowCloudFrontRead",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "cloudfront.amazonaws.com"
                  },
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::$BUCKET/*",
                  "Condition": {
                    "StringEquals": {
                      "AWS:SourceArn": "arn:aws:cloudfront::${{ secrets.AWS_ACCOUNT_ID }}:origin-access-control/$OAC_ID"
                    }
                  }
                }
              ]
            }
            EOF
          aws s3api put-bucket-policy --bucket "$BUCKET" --policy file://bucket-policy.json

  deploy-cloudfront:
    runs-on: ubuntu-latest
    needs: s3-with-oac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CloudFront distribution
        id: cf
        run: |
          REGION="${{ secrets.AWS_REGION }}"
          BUCKET="${{ needs.s3-with-oac.outputs.bucket_name }}"

          if [ "$REGION" = "us-east-1" ]; then
            ORIGIN_DOMAIN="$BUCKET.s3.amazonaws.com"
          else
            ORIGIN_DOMAIN="$BUCKET.s3.$REGION.amazonaws.com"
          fi
          
          DIST_ID=$(aws cloudfront create-distribution \
            --distribution-config "{
              \"CallerReference\": \"my-static-site-001\",
              \"Comment\": \"Static site with OAC\",
              \"Enabled\": true,
              \"Origins\": {
                \"Quantity\": 1,
                \"Items\": [
                  {
                    \"Id\": \"S3Origin\",
                    \"DomainName\": \"$ORIGIN_DOMAIN\",
                    \"OriginAccessControlId\": \"${{ needs.s3-with-oac.outputs.oac_id }}\"
                  }
                ]
              },
              \"DefaultCacheBehavior\": {
                \"TargetOriginId\": \"S3Origin\",
                \"ViewerProtocolPolicy\": \"redirect-to-https\",
                \"AllowedMethods\": {
                  \"Quantity\": 2,
                  \"Items\": [\"GET\", \"HEAD\"]
                },
                \"ForwardedValues\": {
                  \"QueryString\": false,
                  \"Cookies\": {\"Forward\": \"none\"}
                },
                \"MinTTL\": 0
              }
            }" \
            --query "Distribution.Id" --output text)
          echo "dist_id=$DIST_ID" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cf.outputs.dist_id }} \
            --paths "/*"
