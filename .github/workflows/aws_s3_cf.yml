name: Static website using AWS S3 via CloudFront

on:
  push:
    branches:
      - main

jobs:
  # ------------------- JOB 1: S3 + OAC -------------------
  s3-oac:
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.s3.outputs.bucket_name }}
      oac_id: ${{ steps.oac.outputs.oac_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create new bucket or reuse existing
        id: s3
        run: |
          BUCKET="${{ secrets.S3_BUCKET_NAME }}"
          
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket $BUCKET already exists. Reusing."
          else
            if [ "${{ secrets.AWS_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET" \
                --region "${{ secrets.AWS_REGION }}" \
                --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            fi
            echo "Created new bucket: $BUCKET"
          fi

          aws s3api put-public-access-block \
            --bucket "$BUCKET" \
            --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

          echo "bucket_name=$BUCKET" >> $GITHUB_OUTPUT

      - name: Upload all website files to S3
        run: |
          BUCKET="${{ steps.s3.outputs.bucket_name }}"
          aws s3 cp index.html s3://"$BUCKET"/index.html

      - name: Create or reuse Origin Access Control (OAC)
        id: oac
        run: |
          EXISTING_OAC=$(aws cloudfront list-origin-access-controls \
            --query "OriginAccessControlList.Items[?Name=='MyOAC'].Id" \
            --output text)

          if [ -n "$EXISTING_OAC" ]; then
            echo "Reusing existing OAC: $EXISTING_OAC"
            OAC_ID=$EXISTING_OAC
          else
            OAC_ID=$(aws cloudfront create-origin-access-control \
              --origin-access-control-config '{"Name":"MyOAC","Description":"OAC for private S3 bucket","SigningProtocol":"sigv4","SigningBehavior":"always","OriginAccessControlOriginType":"s3"}' \
              --query "OriginAccessControl.Id" --output text)
            echo "Created new OAC: $OAC_ID"
          fi

          echo "oac_id=$OAC_ID" >> $GITHUB_OUTPUT

  # ------------------- JOB 2: CLOUDFRONT -------------------
  cloudfront-deploy:
    runs-on: ubuntu-latest
    needs: s3-oac
    outputs:
      dist_id: ${{ steps.cf.outputs.dist_id }}
      dist_arn: ${{ steps.cf.outputs.dist_arn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CloudFront distribution
        id: cf
        run: |
          REGION="${{ secrets.AWS_REGION }}"
          BUCKET="${{ needs.s3-oac.outputs.bucket_name }}"
          OAC_ID="${{ needs.s3-oac.outputs.oac_id }}"

          if [ "$REGION" = "us-east-1" ]; then
            ORIGIN_DOMAIN="$BUCKET.s3.amazonaws.com"
          else
            ORIGIN_DOMAIN="$BUCKET.s3.$REGION.amazonaws.com"
          fi

          DIST_OUTPUT=$(aws cloudfront create-distribution \
            --distribution-config "{
              \"CallerReference\": \"my-static-site-001-$(date +%s)\",
              \"Comment\": \"Static site with OAC\",
              \"Enabled\": true,
              \"Origins\": {
                \"Quantity\": 1,
                \"Items\": [
                  {
                    \"Id\": \"S3Origin\",
                    \"DomainName\": \"$ORIGIN_DOMAIN\",
                    \"OriginAccessControlId\": \"$OAC_ID\"
                  }
                ]
              },
              \"DefaultCacheBehavior\": {
                \"TargetOriginId\": \"S3Origin\",
                \"ViewerProtocolPolicy\": \"redirect-to-https\",
                \"AllowedMethods\": {\"Quantity\": 2,\"Items\":[\"GET\",\"HEAD\"]},
                \"MinTTL\": 0
              }
            }")

          DIST_ID=$(echo $DIST_OUTPUT | jq -r '.Distribution.Id')
          DIST_ARN=$(echo $DIST_OUTPUT | jq -r '.Distribution.ARN')

          echo "dist_id=$DIST_ID" >> $GITHUB_OUTPUT
          echo "dist_arn=$DIST_ARN" >> $GITHUB_OUTPUT

      - name: Attach bucket policy with CloudFront Distribution ARN
        run: |
          BUCKET="${{ needs.s3-oac.outputs.bucket_name }}"
          DIST_ARN="${{ steps.cf.outputs.dist_arn }}"

          cat <<EOF > bucket-policy.json
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCloudFrontRead",
                "Effect": "Allow",
                "Principal": {
                  "Service": "cloudfront.amazonaws.com"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::$BUCKET/*",
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceArn": "$DIST_ARN"
                  }
                }
              }
            ]
          }
          EOF

          aws s3api put-bucket-policy --bucket "$BUCKET" --policy file://bucket-policy.json

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cf.outputs.dist_id }} \
            --paths "/*"
